{"version":3,"file":"static/js/main.520d80b5.js","mappings":"qJAAYA,EAAsB,SAAtBA,GAAsB,OAAtBA,EAAsB,YAAtBA,EAAsB,kBAAtBA,EAAsB,kBAAtBA,EAAsB,oBAAtBA,CAAsB,MCIrBC,EAA0BC,EAAAA,cAAoB,CACzDC,aAAcH,EAAuBI,KACrCC,gBAAiB,SAACC,GAAoC,I,4DCK3CC,EAA4D,SAACC,GACxE,IAAQC,EAAmDD,EAAnDC,MAAOC,EAA4CF,EAA5CE,WAAYC,EAAgCH,EAAhCG,SAAUC,EAAsBJ,EAAtBI,SAAUC,EAAYL,EAAZK,QAE/C,OACEC,EAAAA,EAAAA,KAACC,EAAAA,QAAS,CAACC,QAASJ,EAAW,EAAI,GAAKK,GAAG,IAAIC,KAAM,EAAGL,QAASA,EAAQM,UACvEC,EAAAA,EAAAA,MAACC,EAAAA,QAAM,CAAAF,SAAA,EACLL,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACC,GAAG,IAAIC,GAAIZ,EAAWF,EAAaC,EAAUc,MAAM,QAAQC,KAAK,QACtEZ,EAAAA,EAAAA,KAACa,EAAAA,QAAI,CAACF,MAAM,QAAQG,SAAS,KAAIT,SAC9BV,QAKX,ECjBaoB,EAAqC,WAChD,IAAAC,EAA0C5B,EAAAA,WAAiBD,GAAnDE,EAAY2B,EAAZ3B,aAAcE,EAAeyB,EAAfzB,gBAEtB,OACES,EAAAA,EAAAA,KAACP,EAAoB,CACnBG,YAAYI,EAAAA,EAAAA,KAACiB,EAAAA,QAAQ,CAACC,KAAK,YAC3BrB,UAAUG,EAAAA,EAAAA,KAACiB,EAAAA,QAAQ,CAACC,KAAK,oBACzBpB,SAAUT,IAAiBH,EAAuBI,KAClDK,MAAM,OACNI,QAAS,kBAAMR,EAAgBL,EAAuBI,KAAK,GAGjE,ECZa6B,EAAwC,WACnD,IAAAH,EAA0C5B,EAAAA,WAAiBD,GAAnDE,EAAY2B,EAAZ3B,aAAcE,EAAeyB,EAAfzB,gBAEtB,OACES,EAAAA,EAAAA,KAACP,EAAoB,CACnBG,YAAYI,EAAAA,EAAAA,KAACiB,EAAAA,QAAQ,CAACC,KAAK,YAC3BrB,UAAUG,EAAAA,EAAAA,KAACiB,EAAAA,QAAQ,CAACC,KAAK,oBACzBpB,SAAUT,IAAiBH,EAAuBkC,QAClDzB,MAAM,UACNI,QAAS,kBAAMR,EAAgBL,EAAuBkC,QAAQ,GAGpE,ECZaC,EAAwC,WACnD,IAAAL,EAA0C5B,EAAAA,WAAiBD,GAAnDE,EAAY2B,EAAZ3B,aAAcE,EAAeyB,EAAfzB,gBAEtB,OACES,EAAAA,EAAAA,KAACP,EAAoB,CACnBG,YAAYI,EAAAA,EAAAA,KAACiB,EAAAA,QAAQ,CAACC,KAAK,YAC3BrB,UAAUG,EAAAA,EAAAA,KAACiB,EAAAA,QAAQ,CAACC,KAAK,oBACzBpB,SAAUT,IAAiBH,EAAuBoC,QAClD3B,MAAM,UACNI,QAAS,kBAAMR,EAAgBL,EAAuBoC,QAAQ,GAGpE,ECZaC,EAAyC,WACpD,IAAAP,EAA0C5B,EAAAA,WAAiBD,GAAnDE,EAAY2B,EAAZ3B,aAAcE,EAAeyB,EAAfzB,gBAEtB,OACES,EAAAA,EAAAA,KAACP,EAAoB,CACnBG,YAAYI,EAAAA,EAAAA,KAACiB,EAAAA,QAAQ,CAACC,KAAK,gBAC3BrB,UAAUG,EAAAA,EAAAA,KAACiB,EAAAA,QAAQ,CAACC,KAAK,wBACzBpB,SAAUT,IAAiBH,EAAuBsC,SAClD7B,MAAM,WACNI,QAAS,kBAAMR,EAAgBL,EAAuBsC,SAAS,GAGrE,E,uCCfaC,EAAoCC,EAAAA,Y,UCDpCC,GAAaC,EAAAA,EAAAA,cAA2C,6BACxDC,GAAeD,EAAAA,EAAAA,cAAa,+BAC5BE,GAAoBF,EAAAA,EAAAA,cAAa,oCACjCG,GAAwBH,EAAAA,EAAAA,cAAqB,wCAC7CI,GAAuBJ,EAAAA,EAAAA,cAAa,uCAEpCK,GAAkBL,EAAAA,EAAAA,cAAqB,iCCFvCM,EAA4B,WACvC,IAAMC,EAAWV,IAEXW,EAAoBhD,EAAAA,aAAkB,WAC1C+C,EAASN,IACX,GAAG,CAACM,IAEJ,OACEnC,EAAAA,EAAAA,KAACqC,EAAAA,QAAU,CAACC,MAAMtC,EAAAA,EAAAA,KAACQ,EAAAA,QAAI,CAACE,GAAI6B,EAAAA,QAAerB,KAAK,SAASN,KAAK,KAAKD,MAAM,UAAYZ,QAASqC,GAElG,ECbaI,EAAkDC,EAAAA,Y,UCAlDC,EAAsB,SAACC,GAAgB,OAAKA,EAAMC,QAAS,EAE3DC,GAAiBC,EAAAA,EAAAA,gBAAe,CAACJ,IAAsB,SAACC,GACnE,OAAOA,EAAMC,QACf,IAEaG,GAAwBD,EAAAA,EAAAA,gBAAe,CAACJ,IAAsB,SAACC,GAC1E,OAAOA,EAAMK,eACf,IAEaC,GAAkBH,EAAAA,EAAAA,gBAAe,CAACJ,IAAsB,SAACC,GACpE,OAAOA,EAAMO,SACf,I,kDCPaC,EAA4C,SAACzD,GACxD,IAAQ4C,EAAyC5C,EAAzC4C,KAAMc,EAAmC1D,EAAnC0D,QAAOC,EAA4B3D,EAA1B4D,WAEjBC,EAAyB,iBAFE,IAAAF,EAAG,SAAQA,GAEF,WAAa,WAEvD,OACE/C,EAAAA,EAAAA,MAACkD,EAAAA,QAAM,CAACC,GAAI,EAAGtD,GAAI,EAAGuD,MAAO,EAAGH,QAASA,EAAQlD,SAAA,EAC/CL,EAAAA,EAAAA,KAAC2D,EAAAA,QAAG,CAACC,SAAU,EAAGC,WAAY,EAAExD,SAC7BiC,KAEHtC,EAAAA,EAAAA,KAAC8D,EAAAA,QAAI,CAACF,SAAU,EAAGC,WAAY,EAAGE,UAAW,EAAE1D,SAC5C+C,MAIT,ECZaY,EAAoD,SAACtE,GAChE,IAAQ0D,EAAY1D,EAAZ0D,QAER,OACEpD,EAAAA,EAAAA,KAACmD,EAAY,CACXb,MACEtC,EAAAA,EAAAA,KAAC2D,EAAAA,QAAG,CAACM,GAAI,EAAE5D,UACTL,EAAAA,EAAAA,KAACkE,EAAAA,QAAM,CAACX,QAAQ,UAAUY,MAAM,OAAOC,OAAO,OAAM/D,UAClDL,EAAAA,EAAAA,KAACqE,EAAAA,QAAsB,CAACnD,KAAK,QAAQN,KAAM,GAAID,MAAM,cAI3DyC,SAEEpD,EAAAA,EAAAA,KAACsE,EAAAA,QAAQ,CAACC,YAAU,EAACC,MAAOC,EAAepE,SACxC+C,IAGLE,WAAW,OAGjB,EAEMmB,EAAiBC,EAAAA,QAAAA,OAAkB,CACvCC,KAAM,CACJhE,MAAO,QAETiE,WAAY,CACVC,gBAAiB,QAEnBC,YAAa,CACXD,gBAAiB,QAEnBE,WAAY,CACVF,gBAAiB,QAEnBG,MAAO,CACLH,gBAAiB,UC3CRI,EAA4B,WACvC,IAAMjC,EAAkBR,EAAeO,GAEvC,OAAKC,GAIEhD,EAAAA,EAAAA,KAACgE,EAAgB,CAACZ,QAASJ,IAHzB,IAIX,E,WCJakC,GAA0C,SAACxF,GACtD,IAAQ0D,EAAY1D,EAAZ0D,QAER,OACEpD,EAAAA,EAAAA,KAACmD,EAAY,CACXb,MACEtC,EAAAA,EAAAA,KAACkE,EAAAA,QAAM,CAACX,QAAQ,cAAcY,MAAM,OAAOC,OAAO,OAAM/D,UACtDL,EAAAA,EAAAA,KAACmF,GAAAA,QAAS,CAACjE,KAAK,OAAON,KAAM,GAAID,MAAM,YAG3CyC,SAASpD,EAAAA,EAAAA,KAACa,EAAAA,QAAI,CAACF,MAAM,QAAON,SAAE+C,KAGpC,ECdagC,GAAqB,WAChC,IAAMxC,EAAWJ,EAAeK,GAEhC,OACEvC,EAAAA,EAAAA,MAAC+E,EAAAA,QAAM,CAACC,aAAa,UAASjF,SAAA,CAC3BuC,EAAS2C,KAAI,SAACC,EAASC,GACtB,MAAqB,SAAjBD,EAAQE,MACH1F,EAAAA,EAAAA,KAACkF,GAAW,CAAa9B,QAASoC,EAAQpC,SAAxBqC,GAEN,cAAjBD,EAAQE,MACH1F,EAAAA,EAAAA,KAACgE,EAAgB,CAAaZ,QAASoC,EAAQpC,SAAxBqC,QADhC,CAGF,KACAzF,EAAAA,EAAAA,KAACiF,EAAe,MAGtB,E,sBCzBYU,GAAS,SAATA,GAAS,OAATA,EAAS,uBAATA,EAAS,aAATA,CAAS,M,iCCORC,IAAaC,EAAAA,EAAAA,kBAAiB,4BAA4B,WAAD,IAAAC,GAAAC,EAAAA,GAAAA,UAAE,UAAOC,EAAGC,GAChF,IAAIC,EAEFA,EADkB,QAAhBC,EAAAA,QAAAA,SACaC,GAAAA,QAAAA,QAAqB,iBAErBC,GAAYC,aAAa,iBAGpCL,EAAS9D,SAASoE,GAAaL,GAAU,IACjD,IAAG,OAAF,SAAAM,EAAAC,GAAA,OAAAX,EAAAY,MAAA,KAAAC,UAAE,CAAF,CATsE,IAW1DJ,IAAeV,EAAAA,EAAAA,kBAAiB,8BAA8B,WAAD,IAAAe,GAAAb,EAAAA,GAAAA,UAAE,UAAOc,GAOjF,MANoB,QAAhBV,EAAAA,QAAAA,SACIC,GAAAA,QAAAA,QAAqB,UAAWS,SAEhCR,GAAYS,aAAa,UAAWD,GAGrCA,CACT,IAAG,OAAF,SAAAE,GAAA,OAAAH,EAAAF,MAAA,KAAAC,UAAE,CAAF,CAR0E,IAU9DK,IAAkBpF,EAAAA,EAAAA,cAAwB,kCCxB1CqF,GAAsB,SAACtE,GAAgB,OAAKA,EAAMuE,QAAS,EAE3DC,IAAerE,EAAAA,EAAAA,gBAAe,CAACmE,KAAsB,SAACtE,GACjE,OAAOA,EAAMkE,MACf,IAEaO,IAAkBtE,EAAAA,EAAAA,gBAAe,CAACmE,KAAsB,SAACtE,GACpE,OAAOA,EAAM0E,SACf,ICHaC,GAAwB,WACnC,IAAMnF,EAAWV,IAEX4F,EAAY7E,EAAe4E,IAE3BG,EAAoBnI,EAAAA,aACxB,SAACoI,GACC,IAAMC,EAAWC,OAAOC,OAAOhC,IAAWiC,MAAK,SAACC,GAAI,OAAKA,IAASL,CAAS,IACtEC,GAILtF,EAAS6E,GAAgBS,GAC3B,GACA,CAACtF,IAGH,OACE7B,EAAAA,EAAAA,MAACwH,GAAAA,QAAM,CACLC,cAAeV,EACfW,mBAAmB,oBACnBC,YAAY,oBACZC,cAAe,CACbC,GAAI,cACJC,SAASpI,EAAAA,EAAAA,KAACqI,GAAAA,UAAS,CAACzH,KAAK,OAE3B0H,cAAef,EACfpD,MAAO,IAAI9D,SAAA,EAEXL,EAAAA,EAAAA,KAAC8H,GAAAA,QAAAA,KAAW,CAACnI,MAAM,SAAS4I,MAAO5C,GAAU6C,UAC7CxI,EAAAA,EAAAA,KAAC8H,GAAAA,QAAAA,KAAW,CAACnI,MAAM,OAAO4I,MAAO5C,GAAU8C,SAGjD,E,+BCtCaC,GAA8BC,EAAAA,S,qqBCEpC,IAAMC,GAAW,WAItB,SAAAA,EAAYC,IAA0BC,EAAAA,GAAAA,SAAA,KAAAF,GACpCG,KAAKlC,OAASgC,EAAKhC,OACnBkC,KAAKC,cAAgB,CACnB,eAAgB,mBAChBC,cAAc,UAAWF,KAAKlC,OAElC,CAkEC,OAlEAqC,EAAAA,GAAAA,SAAAN,EAAA,EAAAO,IAAA,aAAAZ,MAAA,eAAAa,GAAArD,EAAAA,GAAAA,UAOD,UAAwB8C,GAKtB,IAAQjG,EAA8BiG,EAA9BjG,SAAUyG,EAAoBR,EAApBQ,OAAQC,EAAYT,EAAZS,QAOpBC,QAAiBC,MAAM,6CAA4CC,GAAA,CACvEC,OAAQ,OACRC,QAASZ,KAAKC,cACdrE,KAAMiF,KAAKC,UAASJ,GAAAA,GAAC,CAAC,EACjBJ,GAAM,IACTS,QAAQ,EACRlH,SAAAA,MAViB,CACnBmH,YAAa,CAAEC,eAAe,MAchC,IAAKT,EAASU,GACZ,MAAM,IAAIC,MAAM,UAAUX,EAASY,kBAG/BpB,KAAKqB,WAAWb,EAAUD,EAClC,IAAC,gBAAA9C,GAAA,OAAA4C,EAAA1C,MAAA,KAAAC,UAAA,EAnCA,IAmCA,CAAAwC,IAAA,aAAAZ,MAAA,eAAA8B,GAAAtE,EAAAA,GAAAA,UAED,UAAyBwD,EAAoBD,GAAmC,IAADgB,EACvEC,EAAsB,OAAhBD,EAAGf,EAAS5E,WAAI,EAAb2F,EAAeE,YAC9B,IAAKD,EACH,MAAM,IAAIL,MAAM,0CAGlB,OAAa,CACX,IAAAO,QAA8BF,EAAOG,OAA7BC,EAAIF,EAAJE,KAAMpC,EAAKkC,EAALlC,MACd,GAAIoC,EACF,MAGFrB,EADcP,KAAK6B,eAAerC,GAEpC,CACF,IAAC,gBAAA9B,EAAAM,GAAA,OAAAsD,EAAA3D,MAAA,KAAAC,UAAA,EAhBA,IAgBA,CAAAwC,IAAA,iBAAAZ,MAED,SAAuBA,GAYrB,OAXoB,IAAIsC,YAAY,SACNC,OAAOvC,GAGlCwC,MAAM,MACNxF,IAAIyF,MACJC,QAAO,SAACC,GAAG,QAAOA,CAAG,IACrB3F,KAAI,SAAC2F,GAAG,OAAKA,EAAIC,QAAQ,SAAU,GAAG,IACtCF,QAAO,SAACC,GAAG,MAAa,WAARA,CAAgB,IAChC3F,KAAI,SAAC2F,GAAG,OAAKtB,KAAKwB,MAAMF,EAAI,IAElB3F,KAAI,SAACsC,GAAI,OAAKwD,KAAIxD,EAAM,0BAA0B,IAAEyD,KAAK,GACxE,KAAC1C,CAAA,CA5EqB,GCIX2C,GAAqB,WAChC,IAAMC,EAAQ9C,KACRvG,EAAWV,IAEXgK,ECEqB,WAC3B,IAAMtJ,EAAWV,IACX+J,EAAQ9C,KAEd,OAAOtJ,EAAAA,YAAkB,WAAD,IAAA0G,GAAAC,EAAAA,GAAAA,UACtB,UAAO8C,GACL,IAAQhC,EAA0BgC,EAA1BhC,OAAQ6E,EAAkB7C,EAAlB6C,cACVC,EAAc,IAAI/C,GAAY,CAAE/B,OAAAA,IAElC+E,GAAiB,EASfvC,EAAqB,CACzBwC,MAAOzE,GAAgBoE,EAAMM,YAC7BC,MAAO,EACPC,WAAY,KACZC,YAAa,IAGf,IACE9J,EAASJ,EAAsB,cACzB4J,EAAYF,WAAW,CAC3B7I,SAAS,CAhBuC,CAClD8C,KAAM,SACNtC,QAAS,wDAciB8I,QAAAC,EAAAA,GAAAA,SAAKT,IAC7BrC,OAAAA,EACAC,QAAS,SAAC8C,GACHR,IACHA,GAAiB,EACjBzJ,EAASH,MAEXG,EAASJ,EAAsBqK,GACjC,IAEF,IAAMpJ,EAAkBD,EAAsByI,EAAMM,YACpD3J,EAASH,GACTG,EAASR,EAAW,CAAE+D,KAAM,YAAatC,QAASJ,IACpD,CAAE,MAAOqJ,GAGP,MAFAlK,EAASL,KAEL4F,OAAO4E,OAAOD,EAAG,WACb,IAAInC,MAAMmC,EAAE7G,SAEZ,IAAI0E,MAAM,gBAEpB,CAAC,QACC/H,EAASH,IACX,CACF,IAAC,gBAAAwE,GAAA,OAAAV,EAAAY,MAAA,KAAAC,UAAA,EAhDsB,GAiDvB,CAACxE,EAAUqJ,GAEf,CDzDqBe,GAEbC,EAAkBpN,EAAAA,YAAkB,WAAD,IAAA0G,GAAAC,EAAAA,GAAAA,UACvC,UAAO0G,GACL,IAAM5F,EAASM,GAAaqE,EAAMM,YAClC,IAAKjF,EACH,MAAM,IAAIqD,MAAM,0BAGlB,IAAMwC,EAA+C,CACnDhH,KAAM,OACNtC,QAASqJ,EAAUzB,QAErB7I,EAASR,EAAW+K,IAEpB,IAAM9J,EAAWC,EAAe2I,EAAMM,YAChCJ,EAAa,GAAAQ,QAAAC,EAAAA,GAAAA,SAAOvJ,GAAQ,CAAE8J,UAE9BjB,EAAW,CAAE5E,OAAAA,EAAQ6E,cAAAA,GAC7B,IAAC,gBAAAlF,GAAA,OAAAV,EAAAY,MAAA,KAAAC,UAAA,EAjBuC,GAkBxC,CAAC8E,EAAYtJ,EAAUqJ,IAGzB,OAAOgB,CACT,EEzBaG,GAAsB,WACjC,IAAMxK,EAAWV,IACX+J,EAAQ9C,KAER1F,EAAkBR,EAAeO,GACjCyJ,EAAkBjB,KAClBkB,EAAYjK,EAAeS,GAE3B2J,EAAoBxN,EAAAA,aAAiB2G,EAAAA,GAAAA,UAAC,YAC1C,IAAM8G,EAAoB5J,EAAgBuI,EAAMM,YAChD,IACE3J,EAASF,EAAgB,WACnBuK,EAAgBK,EACxB,CAAE,MAAOR,GACPlK,EAASF,EAAgB4K,IACzBC,MAAMT,EAAE7G,QACV,CACF,IAAG,CAACrD,EAAUqK,EAAiBhB,IAEzBuB,EAAmB3N,EAAAA,aAAkB,SAAC4N,GAAY,OAAK7K,EAASF,EAAgB+K,GAAM,GAAE,CAAC7K,IAE/F,OACEnC,EAAAA,EAAAA,KAACiN,GAAAA,qBAAoB,CACnBC,EAAG,CACDC,KAAM,QACNC,GAAI,QAENC,SAA0B,QAAhBlH,EAAAA,QAAAA,GAAwB,UAAY,SAAS9F,UAEvDL,EAAAA,EAAAA,KAACmD,EAAY,CACXb,MACEtC,EAAAA,EAAAA,KAAC2D,EAAAA,QAAG,CAACM,GAAI,EAAE5D,UACTL,EAAAA,EAAAA,KAACkE,EAAAA,QAAM,CAACX,QAAQ,cAAcY,MAAM,OAAOC,OAAO,OAAM/D,UACtDL,EAAAA,EAAAA,KAACmF,GAAAA,QAAS,CAACjE,KAAK,OAAON,KAAM,GAAID,MAAM,cAI7CyC,SACE9C,EAAAA,EAAAA,MAAC+E,EAAAA,QAAM,CAAC3B,MAAM,IAAGrD,SAAA,EACfL,EAAAA,EAAAA,KAACsN,GAAAA,QAAQ,CACPC,YAAY,cACZC,iBAAiB,MACjBvF,YAAY,gCACZM,MAAOkE,EACPgB,aAAcV,KAEhB/M,EAAAA,EAAAA,KAAC0N,GAAAA,OAAM,CAAC3N,QAAS6M,EAAmBe,aAAc3K,IAAoByJ,EAAUpM,SAAC,iBAQ7F,EC3DauN,GAA0C,SAAClO,GACtD,IAAQmO,EAAmBnO,EAAnBmO,MAAOC,EAAYpO,EAAZoO,QAEf,OACExN,EAAAA,EAAAA,MAACkD,EAAAA,QAAM,CAAC2E,GAAG,UAAU1E,GAAG,IAAItD,GAAG,IAAI4N,eAAe,gBAAgBC,WAAW,SAASC,EAAE,OAAM5N,SAAA,EAC5FL,EAAAA,EAAAA,KAACwD,EAAAA,QAAM,CAACwK,WAAW,SAAQ3N,UACzBL,EAAAA,EAAAA,KAACa,EAAAA,QAAI,CAACF,MAAM,QAAQG,SAAS,KAAKoN,WAAW,OAAM7N,SAChDwN,OAGL7N,EAAAA,EAAAA,KAACwD,EAAAA,QAAM,CAAAnD,SAAEyN,MAGf,ECVaK,GAAuB,WAClC,IAAMtH,EAASrE,EAAe2E,IAE9B,OACE7G,EAAAA,EAAAA,MAAC+E,EAAAA,QAAM,CAACzB,SAAU,EAAEvD,SAAA,EAClBL,EAAAA,EAAAA,KAAC2D,EAAAA,QAAG,CAACC,SAAU,EAAGC,WAAY,EAAExD,UAC9BL,EAAAA,EAAAA,KAAC4N,GAAW,CACVC,MAAM,OACNC,SACExN,EAAAA,EAAAA,MAACkD,EAAAA,QAAM,CAACE,MAAO,EAAErD,SAAA,EACfL,EAAAA,EAAAA,KAACsH,GAAW,KACZtH,EAAAA,EAAAA,KAACkC,EAAe,YAMtB2E,IAAU7G,EAAAA,EAAAA,KAACO,EAAAA,QAAM,CAACJ,GAAI,EAAEE,SAAC,mCAC1BwG,IACCvG,EAAAA,EAAAA,MAAC8N,EAAAA,WAAU,CAACxK,SAAU,EAAGC,WAAY,EAAGE,UAAW,EAAE1D,SAAA,EACnDL,EAAAA,EAAAA,KAACoF,GAAQ,KACTpF,EAAAA,EAAAA,KAAC2M,GAAS,SAKpB,EChCa0B,GAA0B,WACrC,OACErO,EAAAA,EAAAA,KAACqF,EAAAA,QAAM,CAACzB,SAAU,EAAEvD,UAClBL,EAAAA,EAAAA,KAAC2D,EAAAA,QAAG,CAACC,SAAU,EAAGC,WAAY,EAAExD,UAC9BL,EAAAA,EAAAA,KAAC4N,GAAW,CAACC,MAAM,eAI3B,E,82iFCFaS,GAAkD,SAAHxI,GAAqD,IAA/CyI,EAAMzI,EAANyI,OAAQC,EAAO1I,EAAP0I,QAASC,EAAS3I,EAAT2I,UAAWC,EAAG5I,EAAH4I,IAAKC,EAAM7I,EAAN6I,OACjG,OACE3O,EAAAA,EAAAA,KAAC4O,GAAAA,MAAK,CAACL,OAAQA,EAAQC,QAASA,EAAQnO,UACtCC,EAAAA,EAAAA,MAACsO,GAAM,MAANA,QAAa,CAACC,SAAS,QAAOxO,SAAA,EAC7BL,EAAAA,EAAAA,KAAC4O,GAAM,MAANA,YAAiB,KAClB5O,EAAAA,EAAAA,KAAC4O,GAAM,MAANA,OAAY,CAAAvO,SAAC,iBACdL,EAAAA,EAAAA,KAAC4O,GAAM,MAANA,KAAU,CAAAvO,UACTC,EAAAA,EAAAA,MAAC+E,EAAAA,QAAM,CAAC3B,MAAM,IAAGrD,SAAA,EACfL,EAAAA,EAAAA,KAAC2D,EAAAA,QAAG,CAAAtD,UACFL,EAAAA,EAAAA,KAACa,EAAAA,QAAI,CAACiO,MAAI,EAAAzO,SAAC,uDAEbC,EAAAA,EAAAA,MAACqD,EAAAA,QAAG,CAAAtD,SAAA,EACFL,EAAAA,EAAAA,KAACa,EAAAA,QAAI,CAACiO,MAAI,EAAAzO,SAAC,UACXL,EAAAA,EAAAA,KAACa,EAAAA,QAAI,CAAAR,SAAEqO,QAETpO,EAAAA,EAAAA,MAACqD,EAAAA,QAAG,CAAAtD,SAAA,EACFL,EAAAA,EAAAA,KAACa,EAAAA,QAAI,CAACiO,MAAI,EAAAzO,SAAC,aACXL,EAAAA,EAAAA,KAACa,EAAAA,QAAI,CAAAR,SAAEsO,aAIb3O,EAAAA,EAAAA,KAAC4O,GAAM,MAANA,OAAY,CAAAvO,UACXC,EAAAA,EAAAA,MAACoN,GAAO,OAAPA,MAAY,CAAChK,MAAO,EAAErD,SAAA,EACrBL,EAAAA,EAAAA,KAAC0N,GAAAA,OAAM,CAACqB,QAAQ,QAAQhP,QAASyO,EAAQnO,SAAC,YAG1CL,EAAAA,EAAAA,KAAC0N,GAAAA,OAAM,CAAC3N,QAAS0O,EAAUpO,SAAC,iBAMxC,EC7Ba2O,GAAgC,SAAHlJ,GAAyB,IAAnB4I,EAAG5I,EAAH4I,IAAKC,EAAM7I,EAAN6I,OAC7CxM,EAAWV,IAEjBwN,EAAwC7P,EAAAA,UAAe,GAAM8P,GAAAC,EAAAA,EAAAA,SAAAF,EAAA,GAAtDG,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAE5B3P,EAAoBH,EAAAA,WAAiBD,GAArCI,gBAEF+P,EAAoBlQ,EAAAA,aAAkB,WAC1CiQ,GAAgB,EAClB,GAAG,IAEGE,EAAmBnQ,EAAAA,aAAkB,WACzCiQ,GAAgB,GAChBlN,EAASN,KACTM,EAASF,EAAgB0M,IACzBpP,EAAgBL,EAAuBI,KACzC,GAAG,CAAC6C,EAAUwM,EAAQpP,IAEhBiQ,EAAcpQ,EAAAA,aAAkB,WACpCiQ,GAAgB,EAClB,GAAG,IAEH,OACE/O,EAAAA,EAAAA,MAACqD,EAAAA,QAAG,CAACF,GAAG,IAAItD,GAAG,IAAGE,SAAA,EAChBL,EAAAA,EAAAA,KAACC,EAAAA,QAAS,CAAC4E,gBAAgB,UAAU1E,GAAG,IAAIsD,GAAG,IAAIgM,OAAO,IAAIC,QAAQ,KAAK3P,QAASyP,EAAYnP,UAC9FC,EAAAA,EAAAA,MAAC+E,EAAAA,QAAM,CAAAhF,SAAA,EACLL,EAAAA,EAAAA,KAACa,EAAAA,QAAI,CAACiO,MAAI,EAAChO,SAAS,KAAIT,SACrBqO,KAEH1O,EAAAA,EAAAA,KAACa,EAAAA,QAAI,CAAAR,SAAEsO,UAIX3O,EAAAA,EAAAA,KAACsO,GAAe,CACdI,IAAKA,EACLC,OAAQA,EACRJ,OAAQa,EACRZ,QAASc,EACTb,UAAWc,MAInB,E,+NC/CO,IAAMjO,GAAoB,WAC/B,IAAMqO,EAAyCvQ,EAAAA,aAAkB,SAAA0G,GAAA,IAAG+B,EAAI/B,EAAJ+B,KAAI,OAAO7H,EAAAA,EAAAA,KAACgP,G,8WAAMvF,CAAA,GAAK5B,GAAQ,GAAE,IAE/F+H,EAAexQ,EAAAA,aAAkB,SAACyI,GAAgB,OAAKA,EAAK8G,MAAM,GAAE,IAE1E,OAAO3O,EAAAA,EAAAA,KAAC6P,GAAAA,SAAQ,CAACC,KAAMA,GAAMH,WAAYA,EAAYC,aAAcA,GACrE,ECTaG,GAA0B,WACrC,OACEzP,EAAAA,EAAAA,MAAC+E,EAAAA,QAAM,CAACzB,SAAU,EAAEvD,SAAA,EAClBL,EAAAA,EAAAA,KAAC2D,EAAAA,QAAG,CAACC,SAAU,EAAGC,WAAY,EAAExD,UAC9BL,EAAAA,EAAAA,KAAC4N,GAAW,CAACC,MAAM,eAErB7N,EAAAA,EAAAA,KAACoO,EAAAA,WAAU,CAACxK,SAAU,EAAGC,WAAY,EAAGE,UAAW,EAAE1D,UACnDL,EAAAA,EAAAA,KAACsB,GAAO,QAIhB,E,4CCJa0O,GAAwD,SAACtQ,GACpE,IAAQ6O,EAAoB7O,EAApB6O,OAAQC,EAAY9O,EAAZ8O,QACVrM,EAAWV,IACX+J,EAAQ9C,KAEduG,EAA4B7P,EAAAA,SAAe,IAAG8P,GAAAC,EAAAA,EAAAA,SAAAF,EAAA,GAAvCpI,EAAMqI,EAAA,GAAEe,EAASf,EAAA,GAElBgB,EAAkB9Q,EAAAA,aAAiB2G,EAAAA,GAAAA,UAAC,YACxC5D,EAASoE,GAAaM,IACtB2H,GACF,IAAG,CAAC3H,EAAQ1E,EAAUqM,IAWtB,OATApP,EAAAA,WAAgB,WACd,GAAKmP,EAAL,CAIA,IAAM4B,EAAiBhJ,GAAaqE,EAAMM,YAC1CmE,EAAUE,EAHV,CAIF,GAAG,CAAC5B,EAAQ/C,KAGVxL,EAAAA,EAAAA,KAAC4O,GAAAA,MAAK,CAACL,OAAQA,EAAQC,QAASA,EAAQnO,UACtCC,EAAAA,EAAAA,MAACsO,GAAM,MAANA,QAAa,CAACC,SAAS,MAAKxO,SAAA,EAC3BL,EAAAA,EAAAA,KAAC4O,GAAM,MAANA,YAAiB,KAClB5O,EAAAA,EAAAA,KAAC4O,GAAM,MAANA,OAAY,CAAAvO,SAAC,oBACdL,EAAAA,EAAAA,KAAC4O,GAAM,MAANA,KAAU,CAAAvO,UACTC,EAAAA,EAAAA,MAAC8P,GAAAA,YAAW,CAAA/P,SAAA,EACVL,EAAAA,EAAAA,KAACoQ,GAAY,YAAZA,MAAiB,CAAA/P,SAAC,aACnBL,EAAAA,EAAAA,KAACqQ,GAAAA,MAAK,CAAC9H,MAAO1B,EAAQ4G,aAAcwC,UAGxCjQ,EAAAA,EAAAA,KAAC4O,GAAM,MAANA,OAAY,CAAAvO,UACXC,EAAAA,EAAAA,MAACoN,GAAO,OAAPA,MAAY,CAAChK,MAAO,EAAErD,SAAA,EACrBL,EAAAA,EAAAA,KAAC0N,GAAAA,OAAM,CAACqB,QAAQ,QAAQuB,YAAY,WAAWvQ,QAASyO,EAAQnO,SAAC,YAGjEL,EAAAA,EAAAA,KAAC0N,GAAAA,OAAM,CAAC3N,QAASmQ,EAAgB7P,SAAC,kBAM9C,EChDakQ,GAA0B,WACrC,IAAM1J,EAASrE,EAAe2E,IAE9B8H,EAAwC7P,EAAAA,UAAe,GAAM8P,GAAAC,EAAAA,EAAAA,SAAAF,EAAA,GAAtDG,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAE9BsB,EAAoBpR,EAAAA,aAAkB,WAC1CiQ,GAAgB,EAClB,GAAG,IAEGoB,EAAoBrR,EAAAA,aAAkB,WAC1CiQ,GAAgB,EAClB,GAAG,IAEGqB,EAAgBtR,EAAAA,SAAc,WAClC,OAAKyH,EAGK8J,KAAS9J,EAAQ,CAAE+J,OAAQ,GAAIC,SAAU,KAAK,SAF/C,SAGX,GAAG,CAAChK,IAEJ,OACEvG,EAAAA,EAAAA,MAAAwQ,EAAAA,SAAA,CAAAzQ,SAAA,EACEL,EAAAA,EAAAA,KAAC2D,EAAAA,QAAG,CAACQ,MAAM,MAAMV,GAAI,EAAGtD,GAAI,EAAG4Q,aAAa,KAAKxN,QAAQ,WAAUlD,UACjEC,EAAAA,EAAAA,MAACkD,EAAAA,QAAM,CAACwK,WAAW,SAASD,eAAe,gBAAe1N,SAAA,EACxDC,EAAAA,EAAAA,MAACO,EAAAA,QAAI,CAACF,MAAM,QAAON,SAAA,CAAC,YAAUqQ,MAC9B1Q,EAAAA,EAAAA,KAAC0N,GAAAA,OAAM,CAAC3N,QAAS0Q,EAAkBpQ,SAAC,iBAIxCL,EAAAA,EAAAA,KAACgQ,GAAkB,CAACzB,OAAQa,EAAcZ,QAASgC,MAGzD,EClCaQ,GAA2B,WACtC,OACE1Q,EAAAA,EAAAA,MAAC+E,EAAAA,QAAM,CAACzB,SAAU,EAAEvD,SAAA,EAClBL,EAAAA,EAAAA,KAAC2D,EAAAA,QAAG,CAACC,SAAU,EAAGC,WAAY,EAAExD,UAC9BL,EAAAA,EAAAA,KAAC4N,GAAW,CAACC,MAAM,gBAGrB7N,EAAAA,EAAAA,KAACoO,EAAAA,WAAU,CAACxK,SAAU,EAAGC,WAAY,EAAGE,UAAW,EAAE1D,UACnDL,EAAAA,EAAAA,KAACO,EAAAA,QAAM,CAACJ,GAAI,EAAEE,UACZL,EAAAA,EAAAA,KAACuQ,GAAa,UAKxB,ECNaU,GAA6B,WACxC,IAAAhC,EAAwC7P,EAAAA,SAAeF,EAAuBoC,SAAQ4N,GAAAC,EAAAA,EAAAA,SAAAF,EAAA,GAA/E5P,EAAY6P,EAAA,GAAE3P,EAAe2P,EAAA,GAEpCgC,GAAoCC,EAAAA,EAAAA,gBAA5BC,EAASF,EAATE,UAAWC,EAAYH,EAAZG,aAQnB,OANAjS,EAAAA,WAAgB,WACI,SAAdgS,GACFC,EAAa,OAEjB,GAAG,CAACD,EAAWC,KAGbrR,EAAAA,EAAAA,KAACb,EAAwBmS,SAAQ,CAAC/I,MAAO,CAAElJ,aAAAA,EAAcE,gBAAAA,GAAkBc,UACzEC,EAAAA,EAAAA,MAAC+E,EAAAA,QAAM,CAACjB,OAAO,OAAOD,MAAM,OAAOZ,QAAQ,WAAWgO,UAAQ,EAAAlR,SAAA,EAC5DC,EAAAA,EAAAA,MAAC+E,EAAAA,QAAM,CAAC2I,WAAW,UAAUpK,SAAU,EAAEvD,SAAA,CACtChB,IAAiBH,EAAuBI,OAAQU,EAAAA,EAAAA,KAACmO,GAAU,IAC3D9O,IAAiBH,EAAuBkC,UAAWpB,EAAAA,EAAAA,KAACqO,GAAa,IACjEhP,IAAiBH,EAAuBoC,UAAWtB,EAAAA,EAAAA,KAAC+P,GAAa,IACjE1Q,IAAiBH,EAAuBsC,WAAYxB,EAAAA,EAAAA,KAACgR,GAAc,QAGtE1Q,EAAAA,EAAAA,MAACkD,EAAAA,QAAM,CAAC2E,GAAG,cAAc6F,WAAW,SAASyB,OAAQ,EAAG7L,SAAU,EAAGC,WAAY,EAAExD,SAAA,EACjFL,EAAAA,EAAAA,KAACe,EAAwB,KACzBf,EAAAA,EAAAA,KAACmB,EAA2B,KAC5BnB,EAAAA,EAAAA,KAACqB,EAA2B,KAC5BrB,EAAAA,EAAAA,KAACuB,EAA4B,WAKvC,ECvCaiQ,GAAwB,WACnC,IAAMrP,EAAWV,IAMjB,OAJArC,EAAAA,WAAgB,WACd+C,EAASyD,KACX,GAAG,CAACzD,IAEG,IACT,ECWasP,IAAkBC,EAAAA,EAAAA,eANK,CAClC9O,SAAU,GACVI,gBAAiB,GACjBE,UAAW,KAG8C,SAACyO,GAC1DA,EACGC,QAAQjQ,GAAY,SAACgB,EAAOkP,GAC3BlP,EAAMC,SAASkP,KAAKD,EAAOE,QAC7B,IACCH,QAAQ/P,GAAc,SAACc,GACtBA,EAAMC,SAAW,EACnB,IACCgP,QAAQ9P,GAAmB,SAACa,GAC3BA,EAAMC,SAAWD,EAAMC,SAASoP,MAAM,GAAI,EAC5C,IACCJ,QAAQ7P,GAAuB,SAACY,EAAOkP,GACtClP,EAAMK,gBAAkBL,EAAMK,gBAAgBkJ,OAAO2F,EAAOE,QAC9D,IACCH,QAAQ5P,GAAsB,SAACW,GAC9BA,EAAMK,gBAAkB,EAC1B,IACC4O,QAAQ3P,GAAiB,SAACU,EAAOkP,GAChClP,EAAMO,UAAY2O,EAAOE,OAC3B,GACJ,IClCME,GAA8B,CAClCpL,OAAQ,GACRQ,UAAW1B,GAAU6C,QAGV0J,IAAkBR,EAAAA,EAAAA,eAAcO,IAAc,SAACN,GAC1DA,EACGC,QAAQrL,GAAa4L,WAAW,SAACxP,EAAOkP,GACvClP,EAAMkE,OAASgL,EAAOE,OACxB,IACCH,QAAQ5K,IAAiB,SAACrE,EAAOkP,GAChClP,EAAM0E,UAAYwK,EAAOE,OAC3B,GACJ,IClBavG,IAAQ4G,EAAAA,EAAAA,gBAAe,CAClCC,QAAS,CACPnL,SAAUgL,GACVtP,SAAU6O,MCCRa,IAAQC,EAAAA,EAAAA,aAAY,CACxBC,oBAAoB,EACpBC,iBAAkB,SAcpB,SAXsB,WACpB,OACEzS,EAAAA,EAAAA,KAAC0S,EAAAA,mBAAkB,CAACJ,MAAOA,GAAMjS,UAC/BC,EAAAA,EAAAA,MAACgR,EAAAA,SAAQ,CAAC9F,MAAOA,GAAMnL,SAAA,EACrBL,EAAAA,EAAAA,KAACwR,GAAW,KACZxR,EAAAA,EAAAA,KAACiR,GAAgB,QAIzB,EClBA,GAAoB,QAAhB9K,EAAAA,QAAAA,GAAuB,CACzBwM,QAAQC,IAAI,gBAAiBzM,EAAAA,QAAAA,IAE7B,IAAkB0M,GAAqBC,EAAQ,IAAvCC,SACUC,GAAkBF,EAAQ,MAApCC,SACUE,GAA2BH,EAAQ,MAA7CC,SACUG,GAAgBJ,EAAQ,MAAlCC,SACRC,KACAE,KACAL,KACAI,IACF,EAKAE,EAAAA,EAAAA,SAAsBC,G,GCpBlBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CACjDK,GAAIL,EACJM,QAAQ,EACRH,QAAS,CAAC,GAUX,OANAI,EAAoBP,GAAUQ,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAG3EK,EAAOE,QAAS,EAGTF,EAAOD,OACf,CAGAJ,EAAoBU,EAAIF,E,MC5BxB,IAAIG,EAAW,GACfX,EAAoBY,EAAI,CAAChO,EAAQiO,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAeC,IACnB,IAASC,EAAI,EAAGA,EAAIP,EAASrD,OAAQ4D,IAAK,CAGzC,IAFA,IAAKL,EAAUC,EAAIC,GAAYJ,EAASO,GACpCrC,GAAY,EACPsC,EAAI,EAAGA,EAAIN,EAASvD,OAAQ6D,MACpB,EAAXJ,GAAsBC,GAAgBD,IAAa3M,OAAOgN,KAAKpB,EAAoBY,GAAGS,OAAOxL,GAASmK,EAAoBY,EAAE/K,GAAKgL,EAASM,MAC9IN,EAASS,OAAOH,IAAK,IAErBtC,GAAY,EACTkC,EAAWC,IAAcA,EAAeD,IAG7C,GAAGlC,EAAW,CACb8B,EAASW,OAAOJ,IAAK,GACrB,IAAIK,EAAIT,SACEX,IAANoB,IAAiB3O,EAAS2O,EAC/B,CACD,CACA,OAAO3O,CAnBP,CAJCmO,EAAWA,GAAY,EACvB,IAAI,IAAIG,EAAIP,EAASrD,OAAQ4D,EAAI,GAAKP,EAASO,EAAI,GAAG,GAAKH,EAAUG,IAAKP,EAASO,GAAKP,EAASO,EAAI,GACrGP,EAASO,GAAK,CAACL,EAAUC,EAAIC,EAqBjB,C,KCzBdf,EAAoBwB,EAAKnB,IACxB,IAAIoB,EAASpB,GAAUA,EAAOqB,WAC7B,IAAOrB,EAAiB,QACxB,IAAM,EAEP,OADAL,EAAoB2B,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,E,MCNd,IACII,EADAC,EAAW1N,OAAO2N,eAAkBC,GAAS5N,OAAO2N,eAAeC,GAASA,GAASA,EAAa,UAQtGhC,EAAoBiC,EAAI,SAAShN,EAAOiN,GAEvC,GADU,EAAPA,IAAUjN,EAAQQ,KAAKR,IAChB,EAAPiN,EAAU,OAAOjN,EACpB,GAAoB,kBAAVA,GAAsBA,EAAO,CACtC,GAAW,EAAPiN,GAAajN,EAAMyM,WAAY,OAAOzM,EAC1C,GAAW,GAAPiN,GAAoC,oBAAfjN,EAAMkN,KAAqB,OAAOlN,CAC5D,CACA,IAAImN,EAAKhO,OAAOiO,OAAO,MACvBrC,EAAoBuB,EAAEa,GACtB,IAAIE,EAAM,CAAC,EACXT,EAAiBA,GAAkB,CAAC,KAAMC,EAAS,CAAC,GAAIA,EAAS,IAAKA,EAASA,IAC/E,IAAI,IAAIS,EAAiB,EAAPL,GAAYjN,EAAyB,iBAAXsN,KAAyBV,EAAeW,QAAQD,GAAUA,EAAUT,EAASS,GACxHnO,OAAOqO,oBAAoBF,GAASG,SAAS7M,GAASyM,EAAIzM,GAAO,IAAOZ,EAAMY,KAI/E,OAFAyM,EAAa,QAAI,IAAM,EACvBtC,EAAoB2B,EAAES,EAAIE,GACnBF,CACR,C,KCxBApC,EAAoB2B,EAAI,CAACvB,EAASuC,KACjC,IAAI,IAAI9M,KAAO8M,EACX3C,EAAoB4C,EAAED,EAAY9M,KAASmK,EAAoB4C,EAAExC,EAASvK,IAC5EzB,OAAOyO,eAAezC,EAASvK,EAAK,CAAEiN,YAAY,EAAM/K,IAAK4K,EAAW9M,IAE1E,ECNDmK,EAAoB+C,EAAI,WACvB,GAA0B,kBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOvN,MAAQ,IAAIwN,SAAS,cAAb,EAChB,CAAE,MAAOlK,GACR,GAAsB,kBAAXmK,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBlD,EAAoBmD,IAAO9C,KAC1BA,EAASjM,OAAOiO,OAAOhC,IACXtT,WAAUsT,EAAOtT,SAAW,IACxCqH,OAAOyO,eAAexC,EAAQ,UAAW,CACxCyC,YAAY,EACZM,IAAK,KACJ,MAAM,IAAIxM,MAAM,0FAA4FyJ,EAAOC,GAAG,IAGjHD,GCTRL,EAAoB4C,EAAI,CAACZ,EAAKqB,IAAUjP,OAAOkP,UAAUC,eAAe9C,KAAKuB,EAAKqB,GCClFrD,EAAoBuB,EAAKnB,IACH,qBAAXoD,QAA0BA,OAAOC,aAC1CrP,OAAOyO,eAAezC,EAASoD,OAAOC,YAAa,CAAExO,MAAO,WAE7Db,OAAOyO,eAAezC,EAAS,aAAc,CAAEnL,OAAO,GAAO,ECL9D+K,EAAoB0D,IAAOrD,IAC1BA,EAAOsD,MAAQ,GACVtD,EAAOtT,WAAUsT,EAAOtT,SAAW,IACjCsT,GCHRL,EAAoB4D,EAAI,mB,MCKxB,IAAIC,EAAkB,CACrB,IAAK,GAaN7D,EAAoBY,EAAEO,EAAK2C,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4BxH,KACvD,IAGIyD,EAAU6D,GAHTjD,EAAUoD,EAAaC,GAAW1H,EAGhB0E,EAAI,EAC3B,GAAGL,EAASsD,MAAM7D,GAAgC,IAAxBuD,EAAgBvD,KAAa,CACtD,IAAIL,KAAYgE,EACZjE,EAAoB4C,EAAEqB,EAAahE,KACrCD,EAAoBU,EAAET,GAAYgE,EAAYhE,IAGhD,GAAGiE,EAAS,IAAItR,EAASsR,EAAQlE,EAClC,CAEA,IADGgE,GAA4BA,EAA2BxH,GACrD0E,EAAIL,EAASvD,OAAQ4D,IACzB4C,EAAUjD,EAASK,GAChBlB,EAAoB4C,EAAEiB,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAO9D,EAAoBY,EAAEhO,EAAO,EAGjCwR,EAAqBC,KAAsB,gBAAIA,KAAsB,iBAAK,GAC9ED,EAAmB1B,QAAQqB,EAAqBO,KAAK,KAAM,IAC3DF,EAAmB5F,KAAOuF,EAAqBO,KAAK,KAAMF,EAAmB5F,KAAK8F,KAAKF,G,KC7CvF,IAAIG,EAAsBvE,EAAoBY,OAAET,EAAW,CAAC,MAAM,IAAOH,EAAoB,QAC7FuE,EAAsBvE,EAAoBY,EAAE2D,E","sources":["components/FooterNavigation/FooterNavigation.types.ts","components/FooterNavigation/FooterNavigation.context.tsx","components/FooterNavigation/FooterNavigationItem.tsx","components/FooterNavigation/FooterNavigationItemChat.tsx","components/FooterNavigation/FooterNavigationItemHistory.tsx","components/FooterNavigation/FooterNavigationItemPrompts.tsx","components/FooterNavigation/FooterNavigationItemSettings.tsx","hooks/useAppDispatch.ts","store/messages/messages.actions.ts","screens/chat/components/ClearChatButton/ClearChatButton.tsx","hooks/useAppSelector.ts","store/messages/messages.selectors.ts","screens/chat/components/MessageBlock/MessageBlock.tsx","screens/chat/components/AssistantMessage/AssistantMessage.tsx","screens/chat/components/IncomingMessage/IncomingMessage.tsx","screens/chat/components/UserMessage/UserMessage.tsx","screens/chat/components/Messages/Messages.tsx","services/openai/ChatService.types.ts","store/settings/settings.actions.ts","store/settings/settings.selectors.ts","screens/chat/components/ModelSelect/ModelSelect.tsx","hooks/useAppStore.ts","services/openai/ChatService.ts","screens/chat/hooks/useSendChatMessage.ts","screens/chat/hooks/useStreamChat.ts","screens/chat/components/UserInput/UserInput.tsx","components/ScreenTitle/ScreenTitle.tsx","screens/chat/ChatScreen.tsx","screens/history/HistoryScreen.tsx","screens/prompts/components/UsePromptDialog/UsePromptDialog.tsx","screens/prompts/components/Prompt/Prompt.tsx","screens/prompts/components/Prompts/Prompts.tsx","screens/prompts/PromptsScreen.tsx","screens/settings/components/ApiKeyUpdateDialog/ApiKeyUpdateDialog.tsx","screens/settings/components/ApiKeySection/ApiKeySection.tsx","screens/settings/SettingsScreen.tsx","components/FooterNavigation/FooterNavigation.tsx","components/InitAppData/InitAppData.tsx","store/messages/messages.reducer.ts","store/settings/settings.reducer.ts","store/store.ts","App.tsx","index.js","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/create fake namespace object","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/harmony module decorator","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/node module decorator","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["export enum FooterNavigationScreen {\n  Chat = \"Chat\",\n  History = \"History\",\n  Prompts = \"Prompts\",\n  Settings = \"Settings\",\n}\n","import React from \"react\";\n\nimport { FooterNavigationScreen } from \"./FooterNavigation.types\";\n\nexport const FooterNavigationContext = React.createContext({\n  activeScreen: FooterNavigationScreen.Chat,\n  setActiveScreen: (screen: FooterNavigationScreen) => {},\n});\n","import { Center, Icon, Pressable, Text } from \"native-base\";\nimport React from \"react\";\n\ntype FooterNavigationItemProps = {\n  label: string;\n  activeIcon: React.ReactElement;\n  idleIcon: React.ReactElement;\n  isActive: boolean;\n  onPress: () => void;\n};\n\nexport const FooterNavigationItem: React.FC<FooterNavigationItemProps> = (props) => {\n  const { label, activeIcon, idleIcon, isActive, onPress } = props;\n\n  return (\n    <Pressable opacity={isActive ? 1 : 0.5} py=\"3\" flex={1} onPress={onPress}>\n      <Center>\n        <Icon mb=\"1\" as={isActive ? activeIcon : idleIcon} color=\"white\" size=\"sm\" />\n        <Text color=\"white\" fontSize=\"12\">\n          {label}\n        </Text>\n      </Center>\n    </Pressable>\n  );\n};\n","import { Ionicons } from \"@expo/vector-icons\";\nimport React from \"react\";\n\nimport { FooterNavigationContext } from \"./FooterNavigation.context\";\nimport { FooterNavigationScreen } from \"./FooterNavigation.types\";\nimport { FooterNavigationItem } from \"./FooterNavigationItem\";\n\nexport const FooterNavigationItemChat: React.FC = () => {\n  const { activeScreen, setActiveScreen } = React.useContext(FooterNavigationContext);\n\n  return (\n    <FooterNavigationItem\n      activeIcon={<Ionicons name=\"chatbox\" />}\n      idleIcon={<Ionicons name=\"chatbox-outline\" />}\n      isActive={activeScreen === FooterNavigationScreen.Chat}\n      label=\"Chat\"\n      onPress={() => setActiveScreen(FooterNavigationScreen.Chat)}\n    />\n  );\n};\n","import { Ionicons } from \"@expo/vector-icons\";\nimport React from \"react\";\n\nimport { FooterNavigationContext } from \"./FooterNavigation.context\";\nimport { FooterNavigationScreen } from \"./FooterNavigation.types\";\nimport { FooterNavigationItem } from \"./FooterNavigationItem\";\n\nexport const FooterNavigationItemHistory: React.FC = () => {\n  const { activeScreen, setActiveScreen } = React.useContext(FooterNavigationContext);\n\n  return (\n    <FooterNavigationItem\n      activeIcon={<Ionicons name=\"archive\" />}\n      idleIcon={<Ionicons name=\"archive-outline\" />}\n      isActive={activeScreen === FooterNavigationScreen.History}\n      label=\"History\"\n      onPress={() => setActiveScreen(FooterNavigationScreen.History)}\n    />\n  );\n};\n","import { Ionicons } from \"@expo/vector-icons\";\nimport React from \"react\";\n\nimport { FooterNavigationContext } from \"./FooterNavigation.context\";\nimport { FooterNavigationScreen } from \"./FooterNavigation.types\";\nimport { FooterNavigationItem } from \"./FooterNavigationItem\";\n\nexport const FooterNavigationItemPrompts: React.FC = () => {\n  const { activeScreen, setActiveScreen } = React.useContext(FooterNavigationContext);\n\n  return (\n    <FooterNavigationItem\n      activeIcon={<Ionicons name=\"md-list\" />}\n      idleIcon={<Ionicons name=\"md-list-outline\" />}\n      isActive={activeScreen === FooterNavigationScreen.Prompts}\n      label=\"Prompts\"\n      onPress={() => setActiveScreen(FooterNavigationScreen.Prompts)}\n    />\n  );\n};\n","import { Ionicons } from \"@expo/vector-icons\";\nimport React from \"react\";\n\nimport { FooterNavigationContext } from \"./FooterNavigation.context\";\nimport { FooterNavigationScreen } from \"./FooterNavigation.types\";\nimport { FooterNavigationItem } from \"./FooterNavigationItem\";\n\nexport const FooterNavigationItemSettings: React.FC = () => {\n  const { activeScreen, setActiveScreen } = React.useContext(FooterNavigationContext);\n\n  return (\n    <FooterNavigationItem\n      activeIcon={<Ionicons name=\"md-settings\" />}\n      idleIcon={<Ionicons name=\"md-settings-outline\" />}\n      isActive={activeScreen === FooterNavigationScreen.Settings}\n      label=\"Settings\"\n      onPress={() => setActiveScreen(FooterNavigationScreen.Settings)}\n    />\n  );\n};\n","import { useDispatch } from \"react-redux\";\n\nimport type { AppDispatch } from \"../store/store\";\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { ChatCompletionRequestMessage } from \"openai/api\";\n\nexport const addMessage = createAction<ChatCompletionRequestMessage>(\"store/messages/addMessage\");\nexport const clearMessage = createAction(\"store/messages/clearMessage\");\nexport const removeLastMessage = createAction(\"store/messages/removeLastMessage\");\nexport const appendIncomingMessage = createAction<string>(\"store/messages/appendIncomingMessage\");\nexport const clearIncomingMessage = createAction(\"store/messages/clearIncomingMessage\");\n\nexport const updateUserInput = createAction<string>(\"store/message/updateUserInput\");\n","import { MaterialIcons } from \"@expo/vector-icons\";\nimport { Icon, IconButton } from \"native-base\";\nimport React from \"react\";\n\nimport { useAppDispatch } from \"../../../../hooks/useAppDispatch\";\nimport { clearMessage } from \"../../../../store/messages/messages.actions\";\n\nexport const ClearChatButton: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const handlePressDelete = React.useCallback(() => {\n    dispatch(clearMessage());\n  }, [dispatch]);\n\n  return (\n    <IconButton icon={<Icon as={MaterialIcons} name=\"delete\" size=\"sm\" color=\"white\" />} onPress={handlePressDelete} />\n  );\n};\n","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\n\nimport { RootState } from \"../store/store\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../store\";\n\nexport const selectMessagesState = (state: RootState) => state.messages;\n\nexport const selectMessages = createSelector([selectMessagesState], (state) => {\n  return state.messages;\n});\n\nexport const selectIncomingMessage = createSelector([selectMessagesState], (state) => {\n  return state.incomingMessage;\n});\n\nexport const selectUserInput = createSelector([selectMessagesState], (state) => {\n  return state.userInput;\n});\n","import { Box, Flex, HStack } from \"native-base\";\nimport React from \"react\";\n\ntype MessageBlockProps = {\n  icon: React.ReactElement;\n  content: React.ReactElement;\n  background?: \"normal\" | \"alt\";\n};\n\nexport const MessageBlock: React.FC<MessageBlockProps> = (props) => {\n  const { icon, content, background = \"normal\" } = props;\n\n  const bgColor = background === \"normal\" ? \"dark.200\" : \"dark.100\";\n\n  return (\n    <HStack px={6} py={4} space={4} bgColor={bgColor}>\n      <Box flexGrow={0} flexShrink={0}>\n        {icon}\n      </Box>\n      <Flex flexGrow={1} flexShrink={1} flexBasis={0}>\n        {content}\n      </Flex>\n    </HStack>\n  );\n};\n","import { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { Box, Circle } from \"native-base\";\nimport React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport Markdown from \"react-native-markdown-display\";\n\nimport { MessageBlock } from \"../MessageBlock/MessageBlock\";\n\ntype AssistantMessageProps = {\n  content: string;\n};\n\nexport const AssistantMessage: React.FC<AssistantMessageProps> = (props) => {\n  const { content } = props;\n\n  return (\n    <MessageBlock\n      icon={\n        <Box pt={1}>\n          <Circle bgColor=\"dark.50\" width=\"24px\" height=\"24px\">\n            <MaterialCommunityIcons name=\"robot\" size={16} color=\"white\" />\n          </Circle>\n        </Box>\n      }\n      content={\n        // @ts-ignore\n        <Markdown mergeStyle style={markdownStyles}>\n          {content}\n        </Markdown>\n      }\n      background=\"alt\"\n    />\n  );\n};\n\nconst markdownStyles = StyleSheet.create({\n  body: {\n    color: \"#FFF\",\n  },\n  blockquote: {\n    backgroundColor: \"#222\",\n  },\n  code_inline: {\n    backgroundColor: \"#222\",\n  },\n  code_block: {\n    backgroundColor: \"#222\",\n  },\n  fence: {\n    backgroundColor: \"#222\",\n  },\n});\n","import React from \"react\";\n\nimport { useAppSelector } from \"../../../../hooks/useAppSelector\";\nimport { selectIncomingMessage } from \"../../../../store/messages/messages.selectors\";\nimport { AssistantMessage } from \"../AssistantMessage/AssistantMessage\";\n\nexport const IncomingMessage: React.FC = () => {\n  const incomingMessage = useAppSelector(selectIncomingMessage);\n\n  if (!incomingMessage) {\n    return null;\n  }\n\n  return <AssistantMessage content={incomingMessage} />;\n};\n","import { AntDesign } from \"@expo/vector-icons\";\nimport { Circle, Text } from \"native-base\";\nimport React from \"react\";\n\nimport { MessageBlock } from \"../MessageBlock/MessageBlock\";\n\ntype UserMessageProps = {\n  content: string;\n};\n\nexport const UserMessage: React.FC<UserMessageProps> = (props) => {\n  const { content } = props;\n\n  return (\n    <MessageBlock\n      icon={\n        <Circle bgColor=\"primary.600\" width=\"24px\" height=\"24px\">\n          <AntDesign name=\"user\" size={16} color=\"white\" />\n        </Circle>\n      }\n      content={<Text color=\"white\">{content}</Text>}\n    />\n  );\n};\n","import { VStack } from \"native-base\";\nimport React from \"react\";\n\nimport { useAppSelector } from \"../../../../hooks/useAppSelector\";\nimport { selectMessages } from \"../../../../store/messages/messages.selectors\";\nimport { AssistantMessage } from \"../AssistantMessage/AssistantMessage\";\nimport { IncomingMessage } from \"../IncomingMessage/IncomingMessage\";\nimport { UserMessage } from \"../UserMessage/UserMessage\";\n\nexport const Messages: React.FC = () => {\n  const messages = useAppSelector(selectMessages);\n\n  return (\n    <VStack alignContent=\"stretch\">\n      {messages.map((message, index) => {\n        if (message.role === \"user\") {\n          return <UserMessage key={index} content={message.content} />;\n        }\n        if (message.role === \"assistant\") {\n          return <AssistantMessage key={index} content={message.content} />;\n        }\n      })}\n      <IncomingMessage />\n    </VStack>\n  );\n};\n","export enum ChatModel {\n  GPT3_5 = \"gpt-3.5-turbo\",\n  GPT4 = \"gpt-4\",\n}\n\nexport type ChatConfig = {\n  model: ChatModel;\n\n  /**\n   * The maximum number of tokens to generate in the chat completion.\n   *\n   * The total length of input tokens and generated tokens is limited by the model's context length.\n   */\n  max_tokens: number;\n\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n   *\n   * We generally recommend altering this or top_p but not both.\n   */\n  temperature: number;\n\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p: number;\n};\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { createAction, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport * as SecureStore from \"expo-secure-store\";\nimport { Platform } from \"react-native\";\n\nimport { ChatModel } from \"../../services/openai/ChatService.types\";\n\nexport const initApiKey = createAsyncThunk(\"store/settings/initApiKey\", async (_, thunkAPI) => {\n  let result: string | null;\n  if (Platform.OS === \"web\") {\n    result = await AsyncStorage.getItem(\"API_KEY\");\n  } else {\n    result = await SecureStore.getItemAsync(\"API_KEY\");\n  }\n\n  await thunkAPI.dispatch(updateApiKey(result || \"\"));\n});\n\nexport const updateApiKey = createAsyncThunk(\"store/settings/updateApiKey\", async (apiKey: string) => {\n  if (Platform.OS === \"web\") {\n    await AsyncStorage.setItem(\"API_KEY\", apiKey);\n  } else {\n    await SecureStore.setItemAsync(\"API_KEY\", apiKey);\n  }\n\n  return apiKey;\n});\n\nexport const updateChatModel = createAction<ChatModel>(\"store/settings/updateChatModel\");\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../store\";\n\nexport const selectSettingsState = (state: RootState) => state.settings;\n\nexport const selectApiKey = createSelector([selectSettingsState], (state) => {\n  return state.apiKey;\n});\n\nexport const selectChatModel = createSelector([selectSettingsState], (state) => {\n  return state.chatModel;\n});\n","import { CheckIcon, Select } from \"native-base\";\nimport React from \"react\";\n\nimport { useAppDispatch } from \"../../../../hooks/useAppDispatch\";\nimport { useAppSelector } from \"../../../../hooks/useAppSelector\";\nimport { ChatModel } from \"../../../../services/openai/ChatService.types\";\nimport { updateChatModel } from \"../../../../store/settings/settings.actions\";\nimport { selectChatModel } from \"../../../../store/settings/settings.selectors\";\n\nexport const ModelSelect: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const chatModel = useAppSelector(selectChatModel);\n\n  const handleValueChange = React.useCallback(\n    (itemValue: string) => {\n      const newModel = Object.values(ChatModel).find((item) => item === itemValue);\n      if (!newModel) {\n        return;\n      }\n\n      dispatch(updateChatModel(newModel));\n    },\n    [dispatch]\n  );\n\n  return (\n    <Select\n      selectedValue={chatModel}\n      accessibilityLabel=\"Choose Chat Model\"\n      placeholder=\"Choose Chat Model\"\n      _selectedItem={{\n        bg: \"primary.600\",\n        endIcon: <CheckIcon size=\"5\" />,\n      }}\n      onValueChange={handleValueChange}\n      width={120}\n    >\n      <Select.Item label=\"GPT3.5\" value={ChatModel.GPT3_5} />\n      <Select.Item label=\"GPT4\" value={ChatModel.GPT4} />\n    </Select>\n  );\n};\n","import { useStore } from \"react-redux\";\n\nimport { AppStore } from \"../store/store\";\n\nexport const useAppStore: () => AppStore = useStore;\n","import get from \"lodash/get\";\nimport trim from \"lodash/trim\";\nimport { ChatCompletionRequestMessage } from \"openai/api\";\n\nimport { ChatConfig } from \"./ChatService.types\";\n\nexport class ChatService {\n  private readonly apiKey: string;\n  private readonly commonHeaders: Record<string, string>;\n\n  constructor(args: { apiKey: string }) {\n    this.apiKey = args.apiKey;\n    this.commonHeaders = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${this.apiKey}`,\n    };\n  }\n\n  /**\n   * Chat with GPT in stream\n   *\n   * @param args\n   */\n  public async streamChat(args: {\n    messages: ChatCompletionRequestMessage[];\n    config: ChatConfig;\n    onChunk: (chunk: string) => void;\n  }) {\n    const { messages, config, onChunk } = args;\n\n    // This is required when running on native device\n    const extraOptions = {\n      reactNative: { textStreaming: true },\n    };\n\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: this.commonHeaders,\n      body: JSON.stringify({\n        ...config,\n        stream: true,\n        messages,\n      }),\n      ...extraOptions,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n\n    await this.readChunks(response, onChunk);\n  }\n\n  private async readChunks(response: Response, onChunk: (chunk: string) => void) {\n    const reader = response.body?.getReader();\n    if (!reader) {\n      throw new Error(\"Error: fail to read data from response\");\n    }\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        break;\n      }\n      const chunk = this.parseChunkData(value);\n      onChunk(chunk);\n    }\n  }\n\n  private parseChunkData(value: Uint8Array) {\n    const textDecoder = new TextDecoder(\"utf-8\");\n    const chunkData = textDecoder.decode(value);\n\n    const items = chunkData\n      .split(\"\\n\")\n      .map(trim)\n      .filter((str) => !!str)\n      .map((str) => str.replace(\"data: \", \"\"))\n      .filter((str) => str !== \"[DONE]\")\n      .map((str) => JSON.parse(str));\n\n    return items.map((item) => get(item, \"choices.0.delta.content\")).join(\"\");\n  }\n}\n","import { ChatCompletionRequestMessage } from \"openai/api\";\nimport React from \"react\";\n\nimport { useStreamChat } from \"./useStreamChat\";\nimport { useAppDispatch } from \"../../../hooks/useAppDispatch\";\nimport { useAppStore } from \"../../../hooks/useAppStore\";\nimport { addMessage } from \"../../../store/messages/messages.actions\";\nimport { selectMessages } from \"../../../store/messages/messages.selectors\";\nimport { selectApiKey } from \"../../../store/settings/settings.selectors\";\n\nexport const useSendChatMessage = () => {\n  const store = useAppStore();\n  const dispatch = useAppDispatch();\n\n  const streamChat = useStreamChat();\n\n  const sendChatMessage = React.useCallback(\n    async (inputText: string) => {\n      const apiKey = selectApiKey(store.getState());\n      if (!apiKey) {\n        throw new Error(\"Please provide API Key\");\n      }\n\n      const newUserMessage: ChatCompletionRequestMessage = {\n        role: \"user\",\n        content: inputText.trim(),\n      };\n      dispatch(addMessage(newUserMessage));\n\n      const messages = selectMessages(store.getState());\n      const inputMessages = [...messages, newUserMessage];\n\n      await streamChat({ apiKey, inputMessages });\n    },\n    [streamChat, dispatch, store]\n  );\n\n  return sendChatMessage;\n};\n","import { ChatCompletionRequestMessage } from \"openai/api\";\nimport React from \"react\";\n\nimport { useAppDispatch } from \"../../../hooks/useAppDispatch\";\nimport { useAppStore } from \"../../../hooks/useAppStore\";\nimport { ChatService } from \"../../../services/openai/ChatService\";\nimport { ChatConfig, ChatModel } from \"../../../services/openai/ChatService.types\";\nimport {\n  addMessage,\n  appendIncomingMessage,\n  clearIncomingMessage,\n  removeLastMessage,\n} from \"../../../store/messages/messages.actions\";\nimport { selectIncomingMessage } from \"../../../store/messages/messages.selectors\";\nimport { selectChatModel } from \"../../../store/settings/settings.selectors\";\n\nexport const useStreamChat = () => {\n  const dispatch = useAppDispatch();\n  const store = useAppStore();\n\n  return React.useCallback(\n    async (args: { apiKey: string; inputMessages: ChatCompletionRequestMessage[] }) => {\n      const { apiKey, inputMessages } = args;\n      const chatService = new ChatService({ apiKey });\n\n      let isChunkArrived = false;\n\n      // TODO: Allow configure system message\n      const systemMessage: ChatCompletionRequestMessage = {\n        role: \"system\",\n        content: \"You will always provide response in markdown format\",\n      };\n\n      // TODO: Allow configure chat config\n      const config: ChatConfig = {\n        model: selectChatModel(store.getState()),\n        top_p: 1,\n        max_tokens: 2048,\n        temperature: 0.7,\n      };\n\n      try {\n        dispatch(appendIncomingMessage(\"...\"));\n        await chatService.streamChat({\n          messages: [systemMessage, ...inputMessages],\n          config,\n          onChunk: (chunk) => {\n            if (!isChunkArrived) {\n              isChunkArrived = true;\n              dispatch(clearIncomingMessage());\n            }\n            dispatch(appendIncomingMessage(chunk));\n          },\n        });\n        const incomingMessage = selectIncomingMessage(store.getState());\n        dispatch(clearIncomingMessage);\n        dispatch(addMessage({ role: \"assistant\", content: incomingMessage }));\n      } catch (e: any) {\n        dispatch(removeLastMessage());\n\n        if (Object.hasOwn(e, \"message\")) {\n          throw new Error(e.message);\n        } else {\n          throw new Error(\"Error happens\");\n        }\n      } finally {\n        dispatch(clearIncomingMessage());\n      }\n    },\n    [dispatch, store]\n  );\n};\n","import { AntDesign } from \"@expo/vector-icons\";\nimport { Box, Button, Circle, KeyboardAvoidingView, TextArea, VStack } from \"native-base\";\nimport React from \"react\";\nimport { Platform } from \"react-native\";\n\nimport { useAppDispatch } from \"../../../../hooks/useAppDispatch\";\nimport { useAppSelector } from \"../../../../hooks/useAppSelector\";\nimport { useAppStore } from \"../../../../hooks/useAppStore\";\nimport { updateUserInput } from \"../../../../store/messages/messages.actions\";\nimport { selectIncomingMessage, selectUserInput } from \"../../../../store/messages/messages.selectors\";\nimport { useSendChatMessage } from \"../../hooks/useSendChatMessage\";\nimport { MessageBlock } from \"../MessageBlock/MessageBlock\";\n\nexport const UserInput: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const store = useAppStore();\n\n  const incomingMessage = useAppSelector(selectIncomingMessage);\n  const sendChatMessage = useSendChatMessage();\n  const inputText = useAppSelector(selectUserInput);\n\n  const handlePressSubmit = React.useCallback(async () => {\n    const bufferedInputText = selectUserInput(store.getState());\n    try {\n      dispatch(updateUserInput(\"\"));\n      await sendChatMessage(bufferedInputText);\n    } catch (e: any) {\n      dispatch(updateUserInput(bufferedInputText));\n      alert(e.message);\n    }\n  }, [dispatch, sendChatMessage, store]);\n\n  const handleChangeText = React.useCallback((text: string) => dispatch(updateUserInput(text)), [dispatch]);\n\n  return (\n    <KeyboardAvoidingView\n      h={{\n        base: \"400px\",\n        lg: \"auto\",\n      }}\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n    >\n      <MessageBlock\n        icon={\n          <Box pt={1}>\n            <Circle bgColor=\"primary.600\" width=\"24px\" height=\"24px\">\n              <AntDesign name=\"user\" size={16} color=\"white\" />\n            </Circle>\n          </Box>\n        }\n        content={\n          <VStack space=\"2\">\n            <TextArea\n              borderColor=\"primary.600\"\n              autoCompleteType=\"off\"\n              placeholder=\"Tell me about you in 20 words\"\n              value={inputText}\n              onChangeText={handleChangeText}\n            />\n            <Button onPress={handlePressSubmit} isDisabled={!!incomingMessage || !inputText}>\n              Submit\n            </Button>\n          </VStack>\n        }\n      />\n    </KeyboardAvoidingView>\n  );\n};\n","import { HStack, Text } from \"native-base\";\nimport React from \"react\";\n\ntype ScreenTitleProps = {\n  title: string;\n  buttons?: React.ReactElement;\n};\n\nexport const ScreenTitle: React.FC<ScreenTitleProps> = (props) => {\n  const { title, buttons } = props;\n\n  return (\n    <HStack bg=\"dark.50\" px=\"4\" py=\"4\" justifyContent=\"space-between\" alignItems=\"center\" w=\"100%\">\n      <HStack alignItems=\"center\">\n        <Text color=\"white\" fontSize=\"20\" fontWeight=\"bold\">\n          {title}\n        </Text>\n      </HStack>\n      <HStack>{buttons}</HStack>\n    </HStack>\n  );\n};\n","import { Box, Center, HStack, ScrollView, VStack } from \"native-base\";\nimport React from \"react\";\n\nimport { ClearChatButton } from \"./components/ClearChatButton/ClearChatButton\";\nimport { Messages } from \"./components/Messages/Messages\";\nimport { ModelSelect } from \"./components/ModelSelect/ModelSelect\";\nimport { UserInput } from \"./components/UserInput/UserInput\";\nimport { ScreenTitle } from \"../../components/ScreenTitle/ScreenTitle\";\nimport { useAppSelector } from \"../../hooks/useAppSelector\";\nimport { selectApiKey } from \"../../store/settings/settings.selectors\";\n\nexport const ChatScreen: React.FC = () => {\n  const apiKey = useAppSelector(selectApiKey);\n\n  return (\n    <VStack flexGrow={1}>\n      <Box flexGrow={0} flexShrink={0}>\n        <ScreenTitle\n          title=\"Chat\"\n          buttons={\n            <HStack space={2}>\n              <ModelSelect />\n              <ClearChatButton />\n            </HStack>\n          }\n        />\n      </Box>\n\n      {!apiKey && <Center py={4}>Please set Api Key before chat</Center>}\n      {apiKey && (\n        <ScrollView flexGrow={1} flexShrink={1} flexBasis={0}>\n          <Messages />\n          <UserInput />\n        </ScrollView>\n      )}\n    </VStack>\n  );\n};\n","import { Box, VStack } from \"native-base\";\nimport React from \"react\";\n\nimport { ScreenTitle } from \"../../components/ScreenTitle/ScreenTitle\";\n\nexport const HistoryScreen: React.FC = () => {\n  return (\n    <VStack flexGrow={1}>\n      <Box flexGrow={0} flexShrink={0}>\n        <ScreenTitle title=\"History\" />\n      </Box>\n    </VStack>\n  );\n};\n","import { Modal, Button, Box, Text, Spacer, VStack } from \"native-base\";\nimport React from \"react\";\n\ntype UsePromptDialogProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  act: string;\n  prompt: string;\n};\n\nexport const UsePromptDialog: React.FC<UsePromptDialogProps> = ({ isOpen, onClose, onConfirm, act, prompt }) => {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <Modal.Content maxWidth=\"400px\">\n        <Modal.CloseButton />\n        <Modal.Header>Use prompt?</Modal.Header>\n        <Modal.Body>\n          <VStack space=\"2\">\n            <Box>\n              <Text bold>WARN: Use a prompt will wipe your current chat!</Text>\n            </Box>\n            <Box>\n              <Text bold>Act:</Text>\n              <Text>{act}</Text>\n            </Box>\n            <Box>\n              <Text bold>Prompt:</Text>\n              <Text>{prompt}</Text>\n            </Box>\n          </VStack>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button.Group space={2}>\n            <Button variant=\"ghost\" onPress={onClose}>\n              Cancel\n            </Button>\n            <Button onPress={onConfirm}>Use</Button>\n          </Button.Group>\n        </Modal.Footer>\n      </Modal.Content>\n    </Modal>\n  );\n};\n","import { Box, Pressable, Text, VStack } from \"native-base\";\nimport React from \"react\";\n\nimport { FooterNavigationContext } from \"../../../../components/FooterNavigation/FooterNavigation.context\";\nimport { FooterNavigationScreen } from \"../../../../components/FooterNavigation/FooterNavigation.types\";\nimport { useAppDispatch } from \"../../../../hooks/useAppDispatch\";\nimport { clearMessage, updateUserInput } from \"../../../../store/messages/messages.actions\";\nimport { UsePromptDialog } from \"../UsePromptDialog/UsePromptDialog\";\n\ntype PromptProps = {\n  act: string;\n  prompt: string;\n};\n\nexport const Prompt: React.FC<PromptProps> = ({ act, prompt }) => {\n  const dispatch = useAppDispatch();\n\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  const { setActiveScreen } = React.useContext(FooterNavigationContext);\n\n  const handleCloseDialog = React.useCallback(() => {\n    setIsDialogOpen(false);\n  }, []);\n\n  const handleConfirmUse = React.useCallback(() => {\n    setIsDialogOpen(false);\n    dispatch(clearMessage());\n    dispatch(updateUserInput(prompt));\n    setActiveScreen(FooterNavigationScreen.Chat);\n  }, [dispatch, prompt, setActiveScreen]);\n\n  const handlePress = React.useCallback(() => {\n    setIsDialogOpen(true);\n  }, []);\n\n  return (\n    <Box px=\"4\" py=\"2\">\n      <Pressable backgroundColor=\"dark.50\" py=\"2\" px=\"4\" shadow=\"4\" rounded=\"md\" onPress={handlePress}>\n        <VStack>\n          <Text bold fontSize=\"xl\">\n            {act}\n          </Text>\n          <Text>{prompt}</Text>\n        </VStack>\n      </Pressable>\n\n      <UsePromptDialog\n        act={act}\n        prompt={prompt}\n        isOpen={isDialogOpen}\n        onClose={handleCloseDialog}\n        onConfirm={handleConfirmUse}\n      />\n    </Box>\n  );\n};\n","import { FlatList } from \"native-base\";\nimport React from \"react\";\nimport { ListRenderItem } from \"react-native\";\n\nimport data from \"../../../../assets/prompts.json\";\nimport { Prompt } from \"../Prompt/Prompt\";\n\ntype PromptItem = (typeof data)[number];\n\nexport const Prompts: React.FC = () => {\n  const renderItem: ListRenderItem<PromptItem> = React.useCallback(({ item }) => <Prompt {...item} />, []);\n\n  const keyExtractor = React.useCallback((item: PromptItem) => item.prompt, []);\n\n  return <FlatList data={data} renderItem={renderItem} keyExtractor={keyExtractor} />;\n};\n","import { Box, ScrollView, VStack } from \"native-base\";\nimport React from \"react\";\n\nimport { Prompts } from \"./components/Prompts/Prompts\";\nimport { ScreenTitle } from \"../../components/ScreenTitle/ScreenTitle\";\n\nexport const PromptsScreen: React.FC = () => {\n  return (\n    <VStack flexGrow={1}>\n      <Box flexGrow={0} flexShrink={0}>\n        <ScreenTitle title=\"Prompts\" />\n      </Box>\n      <ScrollView flexGrow={1} flexShrink={1} flexBasis={0}>\n        <Prompts />\n      </ScrollView>\n    </VStack>\n  );\n};\n","import { Button, FormControl, Input, Modal } from \"native-base\";\nimport React from \"react\";\n\nimport { useAppDispatch } from \"../../../../hooks/useAppDispatch\";\nimport { useAppStore } from \"../../../../hooks/useAppStore\";\nimport { updateApiKey } from \"../../../../store/settings/settings.actions\";\nimport { selectApiKey } from \"../../../../store/settings/settings.selectors\";\n\ntype ApiKeyUpdateDialogProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nexport const ApiKeyUpdateDialog: React.FC<ApiKeyUpdateDialogProps> = (props) => {\n  const { isOpen, onClose } = props;\n  const dispatch = useAppDispatch();\n  const store = useAppStore();\n\n  const [apiKey, setApiKey] = React.useState(\"\");\n\n  const handleClickSave = React.useCallback(async () => {\n    dispatch(updateApiKey(apiKey));\n    onClose();\n  }, [apiKey, dispatch, onClose]);\n\n  React.useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n\n    const existingApiKey = selectApiKey(store.getState());\n    setApiKey(existingApiKey);\n  }, [isOpen, store]);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <Modal.Content maxWidth=\"80%\">\n        <Modal.CloseButton />\n        <Modal.Header>Update Api Key</Modal.Header>\n        <Modal.Body>\n          <FormControl>\n            <FormControl.Label>Api Key</FormControl.Label>\n            <Input value={apiKey} onChangeText={setApiKey} />\n          </FormControl>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button.Group space={2}>\n            <Button variant=\"ghost\" colorScheme=\"blueGray\" onPress={onClose}>\n              Cancel\n            </Button>\n            <Button onPress={handleClickSave}>Save</Button>\n          </Button.Group>\n        </Modal.Footer>\n      </Modal.Content>\n    </Modal>\n  );\n};\n","import truncate from \"lodash/truncate\";\nimport { Box, Button, HStack, Text } from \"native-base\";\nimport React from \"react\";\n\nimport { useAppSelector } from \"../../../../hooks/useAppSelector\";\nimport { selectApiKey } from \"../../../../store/settings/settings.selectors\";\nimport { ApiKeyUpdateDialog } from \"../ApiKeyUpdateDialog/ApiKeyUpdateDialog\";\n\nexport const ApiKeySection: React.FC = () => {\n  const apiKey = useAppSelector(selectApiKey);\n\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  const handleDialogClose = React.useCallback(() => {\n    setIsDialogOpen(false);\n  }, []);\n\n  const handlePressUpdate = React.useCallback(() => {\n    setIsDialogOpen(true);\n  }, []);\n\n  const displayApiKey = React.useMemo(() => {\n    if (!apiKey) {\n      return \"Not set\";\n    }\n    return `${truncate(apiKey, { length: 10, omission: \"\" })}******`;\n  }, [apiKey]);\n\n  return (\n    <>\n      <Box width=\"90%\" px={2} py={4} borderRadius=\"sm\" bgColor=\"gray.800\">\n        <HStack alignItems=\"center\" justifyContent=\"space-between\">\n          <Text color=\"white\">Api Key: {displayApiKey}</Text>\n          <Button onPress={handlePressUpdate}>Update</Button>\n        </HStack>\n      </Box>\n\n      <ApiKeyUpdateDialog isOpen={isDialogOpen} onClose={handleDialogClose} />\n    </>\n  );\n};\n","import { Box, Center, ScrollView, VStack } from \"native-base\";\nimport React from \"react\";\n\nimport { ApiKeySection } from \"./components/ApiKeySection/ApiKeySection\";\nimport { ScreenTitle } from \"../../components/ScreenTitle/ScreenTitle\";\n\nexport const SettingsScreen: React.FC = () => {\n  return (\n    <VStack flexGrow={1}>\n      <Box flexGrow={0} flexShrink={0}>\n        <ScreenTitle title=\"Settings\" />\n      </Box>\n\n      <ScrollView flexGrow={1} flexShrink={1} flexBasis={0}>\n        <Center py={4}>\n          <ApiKeySection />\n        </Center>\n      </ScrollView>\n    </VStack>\n  );\n};\n","import { Box, HStack, useColorMode, VStack } from \"native-base\";\nimport React from \"react\";\n\nimport { FooterNavigationContext } from \"./FooterNavigation.context\";\nimport { FooterNavigationScreen } from \"./FooterNavigation.types\";\nimport { FooterNavigationItemChat } from \"./FooterNavigationItemChat\";\nimport { FooterNavigationItemHistory } from \"./FooterNavigationItemHistory\";\nimport { FooterNavigationItemPrompts } from \"./FooterNavigationItemPrompts\";\nimport { FooterNavigationItemSettings } from \"./FooterNavigationItemSettings\";\nimport { ChatScreen } from \"../../screens/chat/ChatScreen\";\nimport { HistoryScreen } from \"../../screens/history/HistoryScreen\";\nimport { PromptsScreen } from \"../../screens/prompts/PromptsScreen\";\nimport { SettingsScreen } from \"../../screens/settings/SettingsScreen\";\n\nexport const FooterNavigation: React.FC = () => {\n  const [activeScreen, setActiveScreen] = React.useState(FooterNavigationScreen.Prompts);\n\n  const { colorMode, setColorMode } = useColorMode();\n\n  React.useEffect(() => {\n    if (colorMode !== \"dark\") {\n      setColorMode(\"dark\");\n    }\n  }, [colorMode, setColorMode]);\n\n  return (\n    <FooterNavigationContext.Provider value={{ activeScreen, setActiveScreen }}>\n      <VStack height=\"100%\" width=\"100%\" bgColor=\"dark.200\" safeArea>\n        <VStack alignItems=\"stretch\" flexGrow={1}>\n          {activeScreen === FooterNavigationScreen.Chat && <ChatScreen />}\n          {activeScreen === FooterNavigationScreen.History && <HistoryScreen />}\n          {activeScreen === FooterNavigationScreen.Prompts && <PromptsScreen />}\n          {activeScreen === FooterNavigationScreen.Settings && <SettingsScreen />}\n        </VStack>\n\n        <HStack bg=\"primary.600\" alignItems=\"center\" shadow={6} flexGrow={0} flexShrink={0}>\n          <FooterNavigationItemChat />\n          <FooterNavigationItemHistory />\n          <FooterNavigationItemPrompts />\n          <FooterNavigationItemSettings />\n        </HStack>\n      </VStack>\n    </FooterNavigationContext.Provider>\n  );\n};\n","import React from \"react\";\n\nimport { useAppDispatch } from \"../../hooks/useAppDispatch\";\nimport { initApiKey } from \"../../store/settings/settings.actions\";\n\nexport const InitAppData: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  React.useEffect(() => {\n    dispatch(initApiKey());\n  }, [dispatch]);\n\n  return null;\n};\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { ChatCompletionRequestMessage } from \"openai/api\";\n\nimport {\n  addMessage,\n  appendIncomingMessage,\n  clearIncomingMessage,\n  clearMessage,\n  removeLastMessage,\n  updateUserInput,\n} from \"./messages.actions\";\n\ntype MessagesState = {\n  messages: ChatCompletionRequestMessage[];\n  incomingMessage: string;\n  userInput: string;\n};\n\nconst initialState: MessagesState = {\n  messages: [],\n  incomingMessage: \"\",\n  userInput: \"\",\n};\n\nexport const messagesReducer = createReducer(initialState, (builder) => {\n  builder\n    .addCase(addMessage, (state, action) => {\n      state.messages.push(action.payload);\n    })\n    .addCase(clearMessage, (state) => {\n      state.messages = [];\n    })\n    .addCase(removeLastMessage, (state) => {\n      state.messages = state.messages.slice(0, -1);\n    })\n    .addCase(appendIncomingMessage, (state, action) => {\n      state.incomingMessage = state.incomingMessage.concat(action.payload);\n    })\n    .addCase(clearIncomingMessage, (state) => {\n      state.incomingMessage = \"\";\n    })\n    .addCase(updateUserInput, (state, action) => {\n      state.userInput = action.payload;\n    });\n});\n","import { createReducer } from \"@reduxjs/toolkit\";\n\nimport { updateApiKey, updateChatModel } from \"./settings.actions\";\nimport { ChatModel } from \"../../services/openai/ChatService.types\";\n\ntype SettingsState = {\n  apiKey: string;\n  chatModel: ChatModel;\n};\n\nconst initialState: SettingsState = {\n  apiKey: \"\",\n  chatModel: ChatModel.GPT3_5,\n};\n\nexport const settingsReducer = createReducer(initialState, (builder) => {\n  builder\n    .addCase(updateApiKey.fulfilled, (state, action) => {\n      state.apiKey = action.payload;\n    })\n    .addCase(updateChatModel, (state, action) => {\n      state.chatModel = action.payload;\n    });\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport { messagesReducer } from \"./messages/messages.reducer\";\nimport { settingsReducer } from \"./settings/settings.reducer\";\n\nexport const store = configureStore({\n  reducer: {\n    settings: settingsReducer,\n    messages: messagesReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type AppStore = typeof store;\n","import { extendTheme, NativeBaseProvider } from \"native-base\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport { FooterNavigation } from \"./components/FooterNavigation/FooterNavigation\";\nimport { InitAppData } from \"./components/InitAppData/InitAppData\";\nimport { store } from \"./store/store\";\n\n// extend the theme\nconst theme = extendTheme({\n  useSystemColorMode: false,\n  initialColorMode: \"dark\",\n});\n\nconst App: React.FC = () => {\n  return (\n    <NativeBaseProvider theme={theme}>\n      <Provider store={store}>\n        <InitAppData />\n        <FooterNavigation />\n      </Provider>\n    </NativeBaseProvider>\n  );\n};\n\nexport default App;\n","import { registerRootComponent } from \"expo\";\nimport { Platform } from \"react-native\";\n\nimport App from \"./App\";\n\nif (Platform.OS !== \"web\") {\n  console.log(`Platform.OS: `, Platform.OS);\n\n  const { polyfill: polyfillEncoding } = require(\"react-native-polyfill-globals/src/encoding\");\n  const { polyfill: polyfillFetch } = require(\"react-native-polyfill-globals/src/fetch\");\n  const { polyfill: polyfillReadableStream } = require(\"react-native-polyfill-globals/src/readable-stream\");\n  const { polyfill: polyfillURL } = require(\"react-native-polyfill-globals/src/url\");\n  polyfillFetch();\n  polyfillURL();\n  polyfillEncoding();\n  polyfillReadableStream();\n}\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/openai-chat-ui/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [695], () => (__webpack_require__(4673)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["FooterNavigationScreen","FooterNavigationContext","React","activeScreen","Chat","setActiveScreen","screen","FooterNavigationItem","props","label","activeIcon","idleIcon","isActive","onPress","_jsx","Pressable","opacity","py","flex","children","_jsxs","Center","Icon","mb","as","color","size","Text","fontSize","FooterNavigationItemChat","_React$useContext","Ionicons","name","FooterNavigationItemHistory","History","FooterNavigationItemPrompts","Prompts","FooterNavigationItemSettings","Settings","useAppDispatch","useDispatch","addMessage","createAction","clearMessage","removeLastMessage","appendIncomingMessage","clearIncomingMessage","updateUserInput","ClearChatButton","dispatch","handlePressDelete","IconButton","icon","MaterialIcons","useAppSelector","useSelector","selectMessagesState","state","messages","selectMessages","createSelector","selectIncomingMessage","incomingMessage","selectUserInput","userInput","MessageBlock","content","_props$background","background","bgColor","HStack","px","space","Box","flexGrow","flexShrink","Flex","flexBasis","AssistantMessage","pt","Circle","width","height","MaterialCommunityIcons","Markdown","mergeStyle","style","markdownStyles","StyleSheet","body","blockquote","backgroundColor","code_inline","code_block","fence","IncomingMessage","UserMessage","AntDesign","Messages","VStack","alignContent","map","message","index","role","ChatModel","initApiKey","createAsyncThunk","_ref","_asyncToGenerator","_","thunkAPI","result","Platform","AsyncStorage","SecureStore","getItemAsync","updateApiKey","_x","_x2","apply","arguments","_ref2","apiKey","setItemAsync","_x3","updateChatModel","selectSettingsState","settings","selectApiKey","selectChatModel","chatModel","ModelSelect","handleValueChange","itemValue","newModel","Object","values","find","item","Select","selectedValue","accessibilityLabel","placeholder","_selectedItem","bg","endIcon","CheckIcon","onValueChange","value","GPT3_5","GPT4","useAppStore","useStore","ChatService","args","_classCallCheck","this","commonHeaders","Authorization","_createClass","key","_streamChat","config","onChunk","response","fetch","_objectSpread","method","headers","JSON","stringify","stream","reactNative","textStreaming","ok","Error","statusText","readChunks","_readChunks","_response$body","reader","getReader","_yield$reader$read","read","done","parseChunkData","TextDecoder","decode","split","trim","filter","str","replace","parse","get","join","useSendChatMessage","store","streamChat","inputMessages","chatService","isChunkArrived","model","getState","top_p","max_tokens","temperature","concat","_toConsumableArray","chunk","e","hasOwn","useStreamChat","sendChatMessage","inputText","newUserMessage","UserInput","handlePressSubmit","bufferedInputText","alert","handleChangeText","text","KeyboardAvoidingView","h","base","lg","behavior","TextArea","borderColor","autoCompleteType","onChangeText","Button","isDisabled","ScreenTitle","title","buttons","justifyContent","alignItems","w","fontWeight","ChatScreen","ScrollView","HistoryScreen","UsePromptDialog","isOpen","onClose","onConfirm","act","prompt","Modal","maxWidth","bold","variant","Prompt","_React$useState","_React$useState2","_slicedToArray","isDialogOpen","setIsDialogOpen","handleCloseDialog","handleConfirmUse","handlePress","shadow","rounded","renderItem","keyExtractor","FlatList","data","PromptsScreen","ApiKeyUpdateDialog","setApiKey","handleClickSave","existingApiKey","FormControl","Input","colorScheme","ApiKeySection","handleDialogClose","handlePressUpdate","displayApiKey","truncate","length","omission","_Fragment","borderRadius","SettingsScreen","FooterNavigation","_useColorMode","useColorMode","colorMode","setColorMode","Provider","safeArea","InitAppData","messagesReducer","createReducer","builder","addCase","action","push","payload","slice","initialState","settingsReducer","fulfilled","configureStore","reducer","theme","extendTheme","useSystemColorMode","initialColorMode","NativeBaseProvider","console","log","polyfillEncoding","require","polyfill","polyfillFetch","polyfillReadableStream","polyfillURL","registerRootComponent","App","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","id","loaded","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","j","keys","every","splice","r","n","getter","__esModule","d","a","leafPrototypes","getProto","getPrototypeOf","obj","t","mode","then","ns","create","def","current","indexOf","getOwnPropertyNames","forEach","definition","o","defineProperty","enumerable","g","globalThis","Function","window","hmd","set","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}